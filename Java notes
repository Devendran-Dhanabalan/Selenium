**************Java Static Keyword**************

The static keyword is used for memory management .It can be used with 

1) Variable 
2) Method 
3) Block 
4) Nested Class

static keyword helps to save memory and make program efficient.

For Eg :

	class Student{  
     			int rollno;  
     			String name;  
     			String college="ITS";  //Here each instance variable will get data allocation each time object 
						of this class while collwge is a common property and would remain same for all objects . Hence to avoid excess memory usage static keyword is used . By using static keyword instance variable is stored only once.
}  


  ##Example to explain diffrence between Static and non Static Instance Variable##

class Counter{  
int count=0;//will get memory when instance is created  
  
Counter(){  
count++;  
System.out.println(count);  
}  
  
public static void main(String args[]){  
  
Counter c1=new Counter();  
Counter c2=new Counter();  
Counter c3=new Counter();  
  
 }  
}  

Output : //Because a new instance of the variable is allocated in the memory every time the object is created 
1
1
1


class Counter2{  
static int count=0;//will get memory only once and retain its value  
  
Counter2(){  
count++;  
System.out.println(count);  
}  
  
public static void main(String args[]){  
  
Counter2 c1=new Counter2();  
Counter2 c2=new Counter2();  
Counter2 c3=new Counter2();  
  
 }  
}  

Output :
1
2
3

        ##Java Static Method##

main method is an example of static method .Properties of static method are :

1) belongs to class  rather than instance of the class
2) can be invoked without creating an object 
3) can access/modify static data members


Q) why java main method is static?   //Imp

Ans) because object is not required to call static method if it were non-static method, 
jvm create object first then call main() method that will lead the problem of extra memory allocation.


Q) Can we execute a program without main() method?

Ans) Yes, one of the way is static block but in previous version of JDK not in JDK 1.7.




*********************This Keyword in Java**********************

This is a refernce variable that refers to the current object


##Usage of java this keyword

Here is given the 6 usage of java this keyword.

1) this can be used to refer current class instance variable.
2) this can be used to invoke current class method (implicitly)
3) this() can be used to invoke current class constructor.
4) this can be passed as an argument in the method call.
5) this can be passed as argument in the constructor call.
6) this can be used to return the current class instance from the method.


 //Use of this Keyword//

	class Student{  
int rollno;  
String name;  
float fee;  
Student(int rollno,String name,float fee){  
this.rollno=rollno;  
this.name=name;  
this.fee=fee;  
}  
void display(){System.out.println(rollno+" "+name+" "+fee);}  
}  
  
class TestThis2{  
public static void main(String args[]){  
Student s1=new Student(111,"ankit",5000f);  
Student s2=new Student(112,"sumit",6000f);  
s1.display();  
s2.display();  
}}  

Here this is used as a substitute in order to diffrentiate between instance and local variable.


//this() : to invoke current class constructor//

class A{  
A(){System.out.println("hello a");}  
A(int x){  
this();  
System.out.println(x);  
}  
}  
class TestThis5{  
public static void main(String args[]){  
A a=new A(10);  
}}  





// Reuse of Constructor //

The this() constructor call should be used to reuse the constructor from the constructor. It maintains the chain between the constructors i.e. it is used for constructor chaining. 
Let's see the example given below that displays the actual use of this keyword.


class Student{  
int rollno;  
String name,course;  
float fee;  
Student(int rollno,String name,String course){  
this.rollno=rollno;  
this.name=name;  
this.course=course;  
}  
Student(int rollno,String name,String course,float fee){  
this(rollno,name,course);//reusing constructor                 ---> This() will work only if it is the first statement in the another Constructor . Else compile time error will occur.
this.fee=fee;  
}  
void display(){System.out.println(rollno+" "+name+" "+course+" "+fee);}  
}  
class TestThis7{  
public static void main(String args[]){  
Student s1=new Student(111,"ankit","java");  
Student s2=new Student(112,"sumit","java",6000f);  
s1.display();  
s2.display();  
}}  


********************Java Inheritence**********************




////////////Inheritance (IS-A) ///////////////////


Inheritance in Java is a mechanism through which the child class acquires all the properties and behaviours
of parent object.

 ##Types of Inheritance in Java##

  1) Single 
  2) Multilevel 
  3) Heirarchical
  4) Multiple --> not supported by Java through classes
  5) Hybrid



##Q) Why multiple inheritance is not supported in java? ##


To reduce the complexity and simplify the language, multiple inheritance is not supported in java.

class A{  
void msg(){System.out.println("Hello");}  
}  
class B{  
void msg(){System.out.println("Welcome");}  
}  
class C extends A,B{//suppose if it were  
   
 Public Static void main(String args[]){  
   C obj=new C();  
   obj.msg();//Now which msg() method would be invoked?  --> Method msg() is present in both Class A and B , Hence the compiler will get confused about which method to invoke
}  
}  


****************Java Aggregation*******************************

Aggregaton is also known as HAS-A relationship . In Aggregation object of one class is used as an instance variable in the other.
In Has-A relation and object can be passed as an arguement 


##Example of Aggregation##


public class Address {
		
	String city,state,country;
	

	public Address(String city, String state, String country) {
		this.city = city;
		this.state = state;
		this.country = country;
	}
}




public class Emp {
	
	int id;
	String name;
	Address address;
	static int count = 1;
	public Emp(int id, String name, Address address) {
		this.id = id;
		this.name = name;
		this.address = address;
		
	}
	
	public void display() {
		System.out.println(count + "\t" +id + "\t" + name);
		System.out.println(address.city + "\t" + address.state + "\t" + address.country);
		count++;
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Address add1 = new Address("Kanpur","U.P","India");
		Address add2 = new Address("Pune","Maharashtra","India");
		
		Emp emp1 = new Emp(749777,"Umang",add1);
		Emp emp2 = new Emp(749344,"Pranjal",add2);
		
		emp1.display();
		emp2.display();
		

	}

}



